data = train_x,
y = train_y,
label = "xboost")
library(DALEX)
explain_xboost_breakdown <- DALEX::explain(model = model,
data = train_x,
y = train_y,
label = "xboost")
library(DALEX)
selected_observations <- test_data[1:3, ]
selected_observations <- test_y[1:3, ]
selected_observations <- test_y
explain_xboost_breakdown <- DALEX::explain(model = model,
data = train_x,
y = train_y,
label = "xboost")
library(DALEX)
selected_observations <- test_data[1:3, ]
library(DALEX)
selected_observations <- test_y
explainer_xboost<- DALEX::explain(model, data = train_x, y =train_y)
library(DALEX)
selected_observations <- train_x[,1]
explainer_xboost<- DALEX::explain(model, data = train_x, y =train_y)
train_x[,1]
test_y
test_y[1]
library(DALEX)
selected_observations <- test_y[1]
explainer_xboost<- DALEX::explain(model, data = train_x, y =train_y)
library(DALEX)
selected_observations <- test_y[1]
explainer_xboost<- DALEX::explain(model, data = train_x, y =train_y)
library(DALEX)
selected_observations <- test_y[1]
explainer_xboost<- DALEX::explain(model, data = train_x, y =train_y)
library(DALEX)
selected_observations <- test_y[1]
explainer_xboost<- DALEX::explain(model, data = train_x, y =train_y)
library(DALEX)
selected_observations <- test_y[1]
explainer_xboost<- DALEX::explain(model, data = train_x, y =train_y)
library(DALEX)
selected_observations <- test_y[1]
explainer_xboost<- DALEX::explain(model, data = train_x, y =train_y)
library(DALEX)
new_observation = as.data.frame(train_x[1, , drop = FALSE])
explainer_xboost<- DALEX::explain(model, data = train_x, y =train_y)
library(DALEX)
new_observation = as.data.frame(train_x[1, , drop = FALSE])
explainer_xboost<- DALEX::explain(model, data = train_x, y =train_y)
library(caret)
library(xgboost)
library(caret)
library(lightgbm)
library(rsample)
library(party)
library(caTools)
library(randomForest)
library(corrplot)
library(dplyr)
df <- read.csv('/home/deniz/Masaüstü/yükseklisans/ayz/xaifinal/forestfires.csv', sep=',')
# Get unique values for each column
unique_values <- sapply(df, function(y) sum(length(unique(y))))
head(unique_values)
# Display unique values
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
head(na_count)
categorical_cols <- df %>% select_if(is.character)
head(categorical_cols)
# Select numerical columns
numerical_cols <- df %>% select_if(is.numeric)
corr_matrix <- cor(numerical_cols )
# Open a new graphics device
dev.new()
# Plot the correlation matrix
corrplot::corrplot(corr_matrix, method = "color")
reg_model <- lm(area ~ temp + RH + wind + rain + FFMC + DMC + DC + ISI, data = df)
summary(reg_model)
# Print summary of the regression model
# Split into training (70%) and testing set (30%)
parts <- createDataPartition(df$area, p = 0.7, list = FALSE)
train <- df[parts, ]
test <- df[-parts, ]
# Define predictor and response variables in the training set
train_x <- data.matrix(train[, -which(names(train) == 'area')])
train_y <- train[['area']]
# Define predictor and response variables in the testing set
test_x <- data.matrix(test[, -which(names(test) == 'area')])
test_y <- test[['area']]
# Define final training and testing sets
xgb_train <- xgb.DMatrix(data = train_x, label = train_y)
xgb_test <- xgb.DMatrix(data = test_x, label = test_y)
# Define watchlist
watchlist <- list(train = xgb_train, test = xgb_test)
# Fit XGBoost model and display training and testing data at each round
model <- xgb.train(data = xgb_train, max.depth = 3, watchlist = watchlist, nrounds = 70)
# Make predictions on the testing set
pred_y <- predict(model, xgb_test)
# Calculate MSE, MAE, and RMSE
mse <- mean((test_y - pred_y)^2)
mae <- caret::MAE(test_y, pred_y)
rmse <- caret::RMSE(test_y, pred_y)
print(paste("MSE:", mse))
print(paste("MAE:", mae))
print(paste("RMSE:", rmse))
dtrain = lgb.Dataset(train_x, label = train_y)
dtest = lgb.Dataset.create.valid(dtrain, test_x, label = test_y)
# define parameters
params = list(
objective = "regression"
, metric = "l2"
, min_data = 1L
, learning_rate = .3
)
# validataion data
valids = list(test = dtest)
# train model
model1 = lgb.train(
params = params
, data = dtrain
, nrounds = 5L
, valids = valids
)
lgb.get.eval.result(model1, "test", "l2")
# prediction
pred_y1 = predict(model1, test_x)
# accuracy check
mse1 = mean((test_y - pred_y1)^2)
mae1 = caret::MAE(test_y, pred_y1)
rmse1 = caret::RMSE(test_y, pred_y1)
cat("MSE: ", mse1, "\nMAE: ", mae1, "\nRMSE: ", rmse1)
## gbm model
#https://datascienceplus.com/gradient-boosting-in-r/
library(gbm)
train$month <- as.factor(train$month)
train$day <- as.factor(train$day)
# Assuming you have a data frame named 'train' with the response variable 'Diabetes_012'
gbmmodel <- gbm(area ~ ., data = train, distribution = "gaussian", n.trees = 20,
shrinkage = 0.01, interaction.depth = 4)
# Assuming your 'test_x' is a data frame
# Convert it to a data frame if it's a matrix
test_x_df <- as.data.frame(test_x)
# Predict using the gbm model
pred_y2 <- predict(gbmmodel, newdata = test_x_df, n.trees = 20, type = "response")
# Assuming 'test_y' is the true response variable
# accuracy check
mse2 <- mean((test_y - pred_y2)^2)
mae2 <- caret::MAE(test_y, pred_y2)
rmse2 <- caret::RMSE(test_y, pred_y2)
cat("MSE: ", mse2, "\nMAE: ", mae2, "\nRMSE: ", rmse2)
################################### XAİ ##########################################################
################################### XGBOOST ##########################################################
library(DALEX)
new_observation = as.data.frame(train_x[1, , drop = FALSE])
explainer_xboost<- DALEX::explain(model, data = train_x, y =train_y)
library(DALEX)
new_observation = as.data.frame(train_x[1, , drop = FALSE])
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
new_observation = as.data.frame(train_x[1, , drop = FALSE])
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
new_observation = as.data.frame(train_x[1, , drop = FALSE])
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
new_observation = as.data.frame(train_x[1, , drop = FALSE])
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
new_observation = as.data.frame(train_x[1, , drop = FALSE])
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
library(iml)
# Create an explainer for the XGBoost model
explainer_xboost <- iml::explain(model, data = as.matrix(train_x), y = train_y)
library(iml)
# Assuming 'model' is your xgboost model, and 'train_x' and 'train_y' are your training data
model <- xgboost::xgboost(data = as.matrix(train_x), label = train_y, max.depth = 3, nrounds = 70)
# Create an explainer for the XGBoost model
explainer_xboost <- iml::explain(model, data = as.matrix(train_x), y = train_y)
library(DALEX)
new_observation = as.data.frame(train_x[1, ])
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
new_observation = as.data.frame(train_x[1, ])
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
new_observation = as.data.frame(train_x[1, ])
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
new_observation = as.data.frame(train_x[1, ])
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
new_observation = as.data.frame(train_x[1, ])
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
new_observation = as.data.frame(train_x[1, ])
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
new_observation = as.data.frame(train_x[1, ])
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
new_observation = as.data.frame(train_x[1, ])
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
new_observation = as.data.frame(train_x[1, ])
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
new_observation = as.data.frame(train_x[1, ])
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
library(caret)
library(xgboost)
library(caret)
library(lightgbm)
library(rsample)
library(party)
library(caTools)
library(randomForest)
library(corrplot)
library(dplyr)
df <- read.csv('/home/deniz/Masaüstü/yükseklisans/ayz/xaifinal/forestfires.csv', sep=',')
# Get unique values for each column
unique_values <- sapply(df, function(y) sum(length(unique(y))))
head(unique_values)
# Display unique values
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
head(na_count)
categorical_cols <- df %>% select_if(is.character)
head(categorical_cols)
# Select numerical columns
numerical_cols <- df %>% select_if(is.numeric)
corr_matrix <- cor(numerical_cols )
# Open a new graphics device
dev.new()
# Plot the correlation matrix
corrplot::corrplot(corr_matrix, method = "color")
reg_model <- lm(area ~ temp + RH + wind + rain + FFMC + DMC + DC + ISI, data = df)
summary(reg_model)
# Print summary of the regression model
# Split into training (70%) and testing set (30%)
parts <- createDataPartition(df$area, p = 0.7, list = FALSE)
train <- df[parts, ]
test <- df[-parts, ]
# Define predictor and response variables in the training set
train_x <- data.matrix(train[, -which(names(train) == 'area')])
train_y <- train[['area']]
# Define predictor and response variables in the testing set
test_x <- data.matrix(test[, -which(names(test) == 'area')])
test_y <- test[['area']]
library(DALEX)
new_observation = as.data.frame(train_x[1, ])
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
explainer_dalex_xboost <- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
explainer_dalex_xboost <- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
explainer_dalex_xboost <- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
explain_xboost_breakdown <- DALEX::explain(model = model,
data = train_x,
y = train_y,
label = "xboost")
library(DALEX)
explain_xboost_breakdown <- DALEX::explain(model = model,
data = train_x,
y = train_y,
label = "xboost")
library(DALEX)
explain_xboost_breakdown <- DALEX::explain(model = model,
data = train_x,
y = train_y,
label = "xboost")
library(DALEX)
explain_xboost_breakdown <- DALEX::explain(model = model,
data = train_x,
y = train_y,
label = "xboost")
library(DALEX)
explain_xboost_breakdown <- DALEX::explain(model = model,
data = train_x,
y = train_y,
label = "xboost")
explain_xboost_breakdown <- DALEX::explain(model = model,
data = train,
y = train_y,
label = "xboost")
explain_xboost_breakdown <- DALEX::explain(model = model,
data = train,
y = train_y,
label = "xboost")
library(DALEX)
explainer_xboost_breakdown <- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
explainer_xboost_breakdown <- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
explainer_xboost_breakdown <- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
explainer_xboost_breakdown <- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
explainer_xboost_breakdown <- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
explainer_xboost_breakdown <- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
explainer_xboost_breakdown <- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
explainer_xboost_breakdown <- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
explainer_xboost_breakdown <- DALEX::explain(model, data = train_x, y = train_y)
library(DALEX)
explainer_xboost_breakdown <- DALEX::explain(model, data = train_x, y = train_y)
# Load necessary libraries
library(caret)
library(xgboost)
library(caret)
library(lightgbm)
library(rsample)
library(party)
library(caTools)
library(randomForest)
library(corrplot)
library(dplyr)
df <- read.csv('/home/deniz/Masaüstü/yükseklisans/ayz/xaifinal/forestfires.csv', sep=',')
# Get unique values for each column
unique_values <- sapply(df, function(y) sum(length(unique(y))))
head(unique_values)
# Display unique values
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
head(na_count)
categorical_cols <- df %>% select_if(is.character)
head(categorical_cols)
# Select numerical columns
numerical_cols <- df %>% select_if(is.numeric)
corr_matrix <- cor(numerical_cols )
# Open a new graphics device
dev.new()
# Plot the correlation matrix
corrplot::corrplot(corr_matrix, method = "color")
reg_model <- lm(area ~ temp + RH + wind + rain + FFMC + DMC + DC + ISI, data = df)
summary(reg_model)
# Print summary of the regression model
# Split into training (70%) and testing set (30%)
parts <- createDataPartition(df$area, p = 0.7, list = FALSE)
train <- df[parts, ]
test <- df[-parts, ]
# Define predictor and response variables in the training set
train_x <- data.matrix(train[, -which(names(train) == 'area')])
train_y <- train[['area']]
# Define predictor and response variables in the testing set
test_x <- data.matrix(test[, -which(names(test) == 'area')])
test_y <- test[['area']]
# Define final training and testing sets
xgb_train <- xgb.DMatrix(data = train_x, label = train_y)
xgb_test <- xgb.DMatrix(data = test_x, label = test_y)
# Define watchlist
watchlist <- list(train = xgb_train, test = xgb_test)
# Fit XGBoost model and display training and testing data at each round
model <- xgb.train(data = xgb_train, max.depth = 3, watchlist = watchlist, nrounds = 70)
# Make predictions on the testing set
pred_y <- predict(model, xgb_test)
# Calculate MSE, MAE, and RMSE
mse <- mean((test_y - pred_y)^2)
mae <- caret::MAE(test_y, pred_y)
rmse <- caret::RMSE(test_y, pred_y)
print(paste("MSE:", mse))
print(paste("MAE:", mae))
print(paste("RMSE:", rmse))
dtrain = lgb.Dataset(train_x, label = train_y)
dtest = lgb.Dataset.create.valid(dtrain, test_x, label = test_y)
# define parameters
params = list(
objective = "regression"
, metric = "l2"
, min_data = 1L
, learning_rate = .3
)
# validataion data
valids = list(test = dtest)
# train model
model1 = lgb.train(
params = params
, data = dtrain
, nrounds = 5L
, valids = valids
)
lgb.get.eval.result(model1, "test", "l2")
# prediction
pred_y1 = predict(model1, test_x)
# accuracy check
mse1 = mean((test_y - pred_y1)^2)
mae1 = caret::MAE(test_y, pred_y1)
rmse1 = caret::RMSE(test_y, pred_y1)
cat("MSE: ", mse1, "\nMAE: ", mae1, "\nRMSE: ", rmse1)
## gbm model
#https://datascienceplus.com/gradient-boosting-in-r/
library(gbm)
train$month <- as.factor(train$month)
train$day <- as.factor(train$day)
# Assuming you have a data frame named 'train' with the response variable 'Diabetes_012'
gbmmodel <- gbm(area ~ ., data = train, distribution = "gaussian", n.trees = 20,
shrinkage = 0.01, interaction.depth = 4)
# Assuming your 'test_x' is a data frame
# Convert it to a data frame if it's a matrix
test_x_df <- as.data.frame(test_x)
# Predict using the gbm model
pred_y2 <- predict(gbmmodel, newdata = test_x_df, n.trees = 20, type = "response")
# Assuming 'test_y' is the true response variable
# accuracy check
mse2 <- mean((test_y - pred_y2)^2)
mae2 <- caret::MAE(test_y, pred_y2)
rmse2 <- caret::RMSE(test_y, pred_y2)
cat("MSE: ", mse2, "\nMAE: ", mae2, "\nRMSE: ", rmse2)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
head(train)
rf_model <- randomForest(area ~ ., data = train_data)
rf_model <- randomForest(area ~ ., data = train)
rf_model
explainer_xgb <- DALEX::explain(model, data = as.matrix(train_x), y = train_y)
explainer_xgb <- DALEX::explain(model, data = as.matrix(train_x), y = train_y)
explainer_xgb <- DALEX::explain(model, data = as.matrix(train_x), y = train_y)
explainer_xgb <- DALEX::explain(model, data = as.matrix(train_x), y = train_y)
explainer_xgb <- DALEX::explain(model, data = as.matrix(train_x), y = train_y)
explainer_xgb <- DALEX::explain(model, data = as.matrix(train_x), y = train_y)
explainer_xgb <- DALEX::explain(model, data = as.matrix(train_x), y = train_y)
explainer_xgb <- DALEX::explain(model, data = as.matrix(train_x), y = train_y)
explainer_xgb <- DALEX::explain(model, data = as.matrix(train_x), y = train_y)
explainer_xgb <- DALEX::explain(model, data = as.matrix(train_x), y = train_y)
explainer_xgb <- DALEX::explain(model, data = as.matrix(train_x), y = train_y)
explainer_xgb <- DALEX::explain(model, data = as.matrix(train_x), y = train_y)
explainer_xgb <- DALEX::explain(model, data = as.matrix(train_x), y = train_y)
explainer_xgb <- DALEX::explain(model, data = as.matrix(train_x), y = train_y)
explainer_xgb <- DALEX::explain(model, data = as.matrix(train_x), y = train_y)
explainer_xgb <- DALEX::explain(model, data = as.matrix(train_x), y = train_y)
explainer_xgb <- DALEX::explain(model, data = as.matrix(train_x), y = train_y)
explainer_xgb <- DALEX::explain(model, data = as.matrix(train_x), y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_xboost<- DALEX::explain(model, data = train_x, y = train_y)
explainer_dalex_gbmmodel<- DALEX::explain(gbmmodel, data = train_x, y = train_y)
shap_values_dalex_gbmmodel <- predict_parts(explainer_dalex_xboost, new_observation = as.data.frame(train_x[1, , drop = FALSE]), type = "shap")
explainer_dalex_gbmmodel<- DALEX::explain(gbmmodel, data = train_x, y = train_y)
shap_values_dalex_gbmmodel <- predict_parts(explainer_dalex_gbmmodel, new_observation = as.data.frame(train_x[1, , drop = FALSE]), type = "shap")
explainer_dalex_gbmmodel <- DALEX::explain(gbmmodel, data = train_x, y = train_y)
# Convert matrix to data frame
selected_observation_df <- as.data.frame(train_x[1, , drop = FALSE])
shap_values_dalex_gbmmodel <- predict_parts(explainer_dalex_gbmmodel, new_observation = selected_observation_df, type = "shap")
# Assuming train_x[1, , drop = FALSE] is a numeric vector or matrix
selected_observation_matrix <- as.matrix(train_x[1, , drop = FALSE])
# Assuming 'gbmmodel' is your GBM model
explainer_dalex_gbmmodel <- DALEX::explain(gbmmodel, data = train_x, y = train_y)
# Convert matrix to data frame
selected_observation_df <- as.data.frame(selected_observation_matrix)
# Set correct feature names in the new observation
colnames(selected_observation_df) <- colnames(train_x)
shap_values_dalex_gbmmodel <- predict_parts(explainer_dalex_gbmmodel, new_observation = selected_observation_df, type = "shap")
# Assuming train_x[1, , drop = FALSE] is a numeric vector or matrix
selected_observation_matrix <- as.matrix(train_x[1, , drop = FALSE])
# Assuming 'gbmmodel' is your GBM model
explainer_dalex_gbmmodel <- DALEX::explain(gbmmodel, data = train_x, y = train_y)
# Convert matrix to data frame
selected_observation_df <- as.data.frame(selected_observation_matrix)
# Set correct feature names in the new observation
colnames(selected_observation_df) <- colnames(train_x)
shap_values_dalex_gbmmodel <- predict_parts(explainer_dalex_gbmmodel, new_observation = selected_observation_df, type = "shap")
# Assuming train_x[1, , drop = FALSE] is a numeric vector or matrix
selected_observation_matrix <- as.matrix(train_x[1, , drop = FALSE])
# Assuming 'gbmmodel' is your GBM model
explainer_dalex_gbmmodel <- DALEX::explain(gbmmodel, data = train_x, y = train_y)
# Convert matrix to data frame
selected_observation_df <- as.data.frame(selected_observation_matrix)
# Set correct feature names in the new observation
colnames(selected_observation_df) <- colnames(train_x)
# Convert the new observation to a single-row data frame
selected_observation_df <- as.data.frame(lapply(selected_observation_df, function(x) x[1]))
# Extract the first row as a data frame with appropriate column names
shap_values_dalex_gbmmodel <- predict_parts(explainer_dalex_gbmmodel, new_observation = selected_observation_df, type = "shap")
selected_observations <- test[1:3, ]
explainer_lm <- DALEX::explain(model, data = train_x, y = train_y)
explain_xboost_breakdown <- DALEX::explain(model = model,
data = train_x,
y = train_y,
label = "xboost")
